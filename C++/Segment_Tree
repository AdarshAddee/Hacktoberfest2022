#include<bits/stdc++.h>
using namespace std;
const int N=1e5+2;
int tree[N*4],a[N];
void build(int node,int start,int end){
    if(start==end){
        tree[node]=a[start];
        return;
    }
    int mid=start+(end-start)/2;
    build(2*node,start,mid);
    build(2*node+1,mid+1,end);
    tree[node]=tree[2*node]+tree[2*node+1];
}
int query(int node,int start,int end,int l,int r){
    if(start>r or end<l)//no overlap
    {
        return 0;
    }
    else if(l<=start and end<=r){//complete overlap
        return tree[node];
    }
    else//partial overlap
    {
        int mid=start+(end-start)/2;
        int q1=query(2*node,start,mid,l,r);
        int q2=query(2*node+1,mid+1,end,l,r);
        return q1+q2;
    }
}
int query_max(int node,int start,int end,int l,int r){
    if(start>r or end<l)//no overlap
    {
        return INT_MIN;
    }
    else if(l<=start and end<=r){//complete overlap
        return tree[node];
    }
    else//partial overlap
    {
        int mid=start+(end-start)/2;
        int q1=query_max(2*node,start,mid,l,r);
        int q2=query_max(2*node+1,mid+1,end,l,r);
        return max(q1,q2);
    }
}
int query_max(int node,int start,int end,int l,int r){
    if(start>r or end<l)//no overlap
    {
        return INT_MAX;
    }
    else if(l<=start and end<=r){//complete overlap
        return tree[node];
    }
    else//partial overlap
    {
        int mid=start+(end-start)/2;
        int q1=query_max(2*node,start,mid,l,r);
        int q2=query_max(2*node+1,mid+1,end,l,r);
        return min(q1,q2);
    }
}
void update(int node,int start,int end,int index,int val){
    if(start==end){
        a[start]=val;
        tree[node]=val;
        return;
    }
    int mid=start+(end-start)/2;
    if(index<=mid){
        update(2*node,start,mid,index,val);
    }
    else{
        update(2*node+1,mid+1,end,index,val);
    }
    tree[node]=max(tree[2*node],tree[2*node+1]);
}
int main(){
    int n,type,left,right,ans;
    cin>>n;
    for(int i=0;i<n;i++)
    cin>>a[i];
    build(1,0,n-1);
    for(int i=1;i<=15;i++){
        cout<<tree[i]<<endl;
    }
    while(true){
        cin>>type;
        if(type==-1)
            break;
        cin>>left>>right;  
        ans=query(1,0,n-1,left,right);
        cout<<ans<<"\n";  
    }
    return 0;
}
